{"version":3,"sources":["../lib/Server.js"],"names":["Server","config","routes","_logger","_app","_expressServer","_views","_expressPlugins","_handlers","_config","setRoutes","_initApp","debug","_initExpressPlugins","_initRoutes","_initViews","_initExpressServer","_routes","handlers","forEach","handler","start","views","length","expressPlugins","routePath","Plugin","plugin","getRoutes","getViews","use","addViews","set","path","view","static","json","verify","req","res","buf","rawBody","urlencoded","extended","expressMiddleware","initialize","session","next","err","Error","statusCode","sc","status","error","stack","render","message","env","content","listen","port","info","process","on","close","exit"],"mappings":"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","file":"Server.js","sourcesContent":["// external\nimport bodyParser from 'body-parser';\nimport compress from 'compression';\nimport cookieParser from 'cookie-parser';\nimport express from 'express';\nimport helmet from 'helmet';\nimport passport from 'passport';\nimport params from 'strong-params';\n\n// lib\nimport Logger from './Logger';\n\nexport default class Server {\n  constructor({ config, routes }) {\n    this._logger = new Logger('Server');\n    this._app = null;\n    this._expressServer = null;\n    this._views = [];\n    this._expressPlugins = [];\n    this._handlers = [];\n    this._config = config;\n\n    this.setRoutes(routes);\n\n    this._initApp();\n  }\n\n  start() {\n    this._logger.debug('Starting Server...');\n\n    this._initExpressPlugins();\n    this._initRoutes();\n    this._initViews();\n    this._initExpressServer();\n\n    return this;\n  }\n\n  setRoutes(routes) {\n    this._routes = routes || [];\n\n    return this;\n  }\n\n  addHandlers(handlers) {\n    this._handlers = [\n      ...this._handlers,\n      ...handlers,\n    ];\n\n    handlers.forEach(handler => handler.start());\n\n    return this;\n  }\n\n  addViews(views) {\n    if (views && views.length) {\n      this._views = [\n        ...this._views,\n        ...views,\n      ];\n    }\n\n    return this;\n  }\n\n  addExpressPlugins(expressPlugins) {\n    if (expressPlugins && expressPlugins.length) {\n      this._expressPlugins = [\n        ...this._expressPlugins,\n        ...expressPlugins,\n      ];\n    }\n\n    return this;\n  }\n\n  addPlugin(routePath, Plugin) {\n    const plugin = new Plugin();\n    const routes = plugin.getRoutes();\n    const views = plugin.getViews();\n\n    this._app.use(routePath, routes);\n    this.addViews(views);\n\n    return this;\n  }\n\n  _initApp() {\n    // EXPRESS SET-UP\n    // create app\n    this._app = express();\n\n    // use pug and set views and static directories\n    this._app.set('view engine', 'pug');\n\n    this.addViews([this._config.path.view]);\n\n    this._app.use(express.static(this._config.path.static));\n\n    // add middlewares\n    this._app.use(bodyParser.json({\n      verify(req, res, buf) {\n        req.rawBody = buf;\n      },\n    }));\n    this._app.use(bodyParser.urlencoded({\n      extended: true,\n      verify(req, res, buf) {\n        req.rawBody = buf;\n      },\n    }));\n    this._app.use(compress());\n    this._app.use(cookieParser());\n    this._app.use(helmet());\n    this._app.use(params.expressMiddleware());\n\n    // passport for authenticate\n    this._app.use(passport.initialize());\n    this._app.use(passport.session());\n  }\n\n  _initRoutes() {\n    if (this._routes) {\n      // routes\n      this._app.use('/', this._routes);\n      // catch 404 and forward to error handler\n      this._app.use((req, res, next) => {\n        const err = new Error('Route Not Found');\n        err.statusCode = 404;\n        next(err);\n      });\n    }\n\n    // general errors\n    this._app.use((err, req, res, next) => {\n      const sc = err.statusCode || 500;\n      res.status(sc);\n\n      this._logger.error(\n        'Error on status', sc, err.stack\n      );\n\n      if (sc === 500) {\n        res.render('error', {\n          status: sc,\n          message: err.message,\n          stack: this._config.env === 'development' ? err.stack : '',\n        });\n      } else {\n        res.json({\n          error: err.message,\n        });\n      }\n    });\n\n    return this;\n  }\n\n  _initViews() {\n    this._app.set('views', this._views);\n  }\n\n  _initExpressPlugins() {\n    this._expressPlugins.forEach((plugin) => {\n      if (plugin.path) {\n        this._app.use(plugin.path, plugin.content);\n      } else {\n        this._app.use(plugin.content);\n      }\n    });\n  }\n\n  _initExpressServer() {\n    this.setRoutes();\n    // START AND STOP\n    this._expressServer = this._app.listen(this._config.port, () => {\n      this._logger.info(`Started server and listening on port ${this._config.port}`);\n    });\n\n    process.on('SIGINT', () => {\n      this._logger.info('Server shutting down!');\n      this._expressServer.close();\n      process.exit();\n    });\n\n    process.on('uncaughtException', (error) => {\n      this._logger.error(`uncaughtException: ${error.message}`);\n      this._logger.error(error.stack);\n      process.exit(1);\n    });\n  }\n\n  get expressServer() {\n    return this._expressServer;\n  }\n}\n"]}